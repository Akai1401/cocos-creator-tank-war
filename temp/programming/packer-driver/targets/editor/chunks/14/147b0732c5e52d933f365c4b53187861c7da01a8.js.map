{"version":3,"sources":["file:///Users/akai/Data/cocos/TankWar/assets/script/Menu.ts"],"names":["_decorator","AudioSource","Button","Component","director","ccclass","property","Menu","type","socket","onLoad","audioSource","play","WebSocket","window","socketManager","userListArr","multiPlayer","node","on","EventType","CLICK","send","JSON","stringify","event","data","id","myTankId","store","loadScene","onopen","console","log","onmessage","parse","gameState","alert","push","onclose"],"mappings":"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","sourcesContent":["import { _decorator, AudioSource, Button, Component, director } from \"cc\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"Menu\")\nexport class Menu extends Component {\n  // multiPlayer button\n  @property({ type: Button })\n  multiPlayer: Button = null;\n\n  // store button\n  @property({ type: Button })\n  store: Button = null;\n\n  // audio source\n  @property({\n    type: [AudioSource],\n  })\n  public audioSource: AudioSource = null!;\n\n  // websocket\n  socket: WebSocket = null;\n\n  onLoad() {\n    // play background music\n    this.audioSource.play();\n    // init websocket connection\n    this.socket = new WebSocket(\"ws://a1ac-27-72-104-163.ngrok-free.app\");\n\n    // global variable\n    (window as any).socketManager = this.socket;\n    (window as any).userListArr = [];\n\n    // on click multiplayer button\n    this.multiPlayer.node.on(Button.EventType.CLICK, () => {\n      (window as any).socketManager.send(\n        JSON.stringify({\n          event: \"joinRoom\",\n          data: {\n            id: (window as any).myTankId,\n          },\n        })\n      );\n    });\n    // on click store button\n    this.store.node.on(Button.EventType.CLICK, () => {\n      director.loadScene(\"store\");\n    });\n\n    // socket listeners\n    (window as any).socketManager.onopen = (event) => {\n      console.log(\"Connected to server\");\n    };\n    (window as any).socketManager.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      // on connect event\n      if (data?.event === \"connect\") {\n        // set myTankId\n        if (data?.type === \"ME\") (window as any).myTankId = data?.id;\n      }\n      // on joinRoom event\n      if (data?.event === \"joinRoom\") {\n        // check if the game is already started\n        if (data?.gameState === \"playing\") {\n          alert(\"Please wait for the current game to finish\");\n          return;\n        } else {\n          (window as any).userListArr.push(data);\n          director.loadScene(\"room\");\n        }\n      }\n    };\n    (window as any).socketManager.onclose = (event) => {\n      console.log(\"Closed connection to server\");\n    };\n  }\n}\n"]}