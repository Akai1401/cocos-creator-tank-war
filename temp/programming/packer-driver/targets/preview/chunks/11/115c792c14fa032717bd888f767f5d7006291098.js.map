{"version":3,"sources":["file:///Users/akai/Data/cocos/cocos-creator-tank-war/assets/script/roomCtrl.ts"],"names":["_decorator","Button","Component","director","instantiate","Label","Node","Prefab","Sprite","Vec3","colorMapping","ccclass","property","roomCtrl","type","onLoad","renderUserList","playBtn","node","on","EventType","CLICK","window","socketManager","send","JSON","stringify","event","data","id","myTankId","onmessage","parse","loadScene","console","log","removeUserFromList","tank","addUserToList","userListContainer","removeAllChildren","userListArr","push","newArr","filter","item","forEach","userNode","labelNode","labelComponent","addComponent","string","slice","setPosition","addChild","name","color","getChildByName","getComponent","userCount","children","length","row","Math","floor","col","xOffset","yOffset","newPosition"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Button,\n  Component,\n  director,\n  instantiate,\n  Label,\n  Node,\n  Prefab,\n  Sprite,\n  Vec3,\n} from \"cc\";\nimport { colorMapping } from \"./utils\";\nimport { getMyItem } from \"./apis\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"roomCtrl\")\nexport class roomCtrl extends Component {\n  // play button\n  @property({ type: Button })\n  playBtn: Button = null;\n\n  // tank prefab\n  @property({ type: Prefab })\n  public tank: Prefab = null;\n\n  // user list container\n  @property({ type: Node })\n  public userListContainer: Node = null;\n\n  onLoad() {\n    // render my tank\n    this.renderUserList();\n\n    // on click play button\n    this.playBtn.node.on(Button.EventType.CLICK, () => {\n      (window as any).socketManager.send(\n        JSON.stringify({\n          event: \"startGame\",\n          data: {\n            id: (window as any).myTankId,\n          },\n        })\n      );\n    });\n\n    // socket listeners\n    (window as any).socketManager.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      // on startGame event\n      if (data?.event === \"startGame\") {\n        director.loadScene(\"play\");\n        return;\n      }\n      // on leave room event\n      if (data?.event === \"disconnect\") {\n        console.log(\"disconnect\", data);\n        this.removeUserFromList(data);\n      }\n      // on joinRoom event\n      if (data?.event === \"joinRoom\") {\n        this.tank && this.addUserToList(data);\n      }\n    };\n  }\n\n  addUserToList(data: any) {\n    this.userListContainer.removeAllChildren();\n    (window as any).userListArr.push(data);\n    this.renderUserList();\n  }\n\n  removeUserFromList(data: any) {\n    this.userListContainer.removeAllChildren();\n    const newArr = (window as any).userListArr.filter(\n      (item: any) => item.id !== data?.id\n    );\n    (window as any).userListArr = newArr;\n    this.renderUserList();\n  }\n\n  renderUserList() {\n    (window as any).userListArr.forEach((item: any) => {\n      const userNode = instantiate(this.tank);\n      const labelNode = new Node();\n      const labelComponent = labelNode.addComponent(Label);\n      labelComponent.string =\n        item?.id?.slice(0, 3) +\n        (item?.id === (window as any).myTankId ? \" (You)\" : \"\");\n      labelNode.setPosition(new Vec3(0, 70, 0));\n      userNode.addChild(labelNode);\n      userNode.name = item?.id;\n\n      if (colorMapping[item.color]) {\n        userNode.getChildByName(\"image\").getComponent(Sprite).color =\n          colorMapping[item.color];\n      }\n\n      const userCount = this.userListContainer.children.length;\n      const row = Math.floor(userCount / 4);\n      const col = userCount % 4;\n      const xOffset = 150;\n      const yOffset = 150;\n      const newPosition = new Vec3(\n        -220 + col * xOffset,\n        100 + -row * yOffset,\n        0\n      );\n      userNode.setPosition(newPosition);\n      this.userListContainer.addChild(userNode);\n    });\n  }\n}\n"]}